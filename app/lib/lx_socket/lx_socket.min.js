"use strict";angular.module("lx.socket",["btford.socket-io"]).provider("$lxSocket",function(){function a(){if(!d)throw new Error("Socket not connected")}var b,c,d,e=[],f=[];this.set=function(a,d){d=d||{},d.hasOwnProperty("reconnection")||(d.reconnection=!0),d.reconnectionDelay=d.reconnectionDelay||1e3,d.reconnectionDelayMax=d.reconnectionDelayMax||2e4,d.timeout=d.timeout||5e3,d.reconnectionAttempts=d.reconnectionAttempts||100,d.autoconnect=d.hasOwnProperty("autoconnect")?!!d.autoconnect:!0;try{if("string"!=typeof a||0===a.length)throw new TypeError("Parameter host is missing or is not of type string.");if("boolean"!=typeof d.reconnection)throw new TypeError("Parameter options.reconnection is not of type boolean.");if("number"!=typeof d.reconnectionDelay)throw new TypeError("Parameter options.reconnectionDelay is not of type number.");if("number"!=typeof d.reconnectionDelayMax)throw new TypeError("Parameter options.reconnectionDelayMax is not of type number.");if("number"!=typeof d.timeout)throw new TypeError("Parameter options.timeout is not of type number.");if("number"!=typeof d.reconnectionAttempts)throw new TypeError("Parameter options.reconnectionAttempts is not of type number.")}catch(e){throw e.message+=" (caused by $socketProvider.set)",console.error(e.message),console.error(e.stack),e}b=a,c=d},this.$get=["$rootScope","socketFactory","$log","$timeout",function(g,h,i,j){var k={};return k.connect=function(a){if(a&&!angular.isObject(a))throw new TypeError("Parameter options is missing or is not of type object.");var j=io.connect(b,angular.extend({},c,a||{})),k=j.io.engine;d=h({ioSocket:j}),d.connection=j,d.forward("connect"),d.forward("disconnect"),d.on("connect",function(){i.info("socket connected with:",k.transport.query.transport),g.socketConnected=!0,g.$broadcast("socket:connect"),angular.forEach(e,function(a){d.on(a.name,a.action)}),angular.forEach(f,function(a){d.forward(a.name,a.scope)}),e=[],f=[]}),k.on("upgrade",function(a){i.info("socket upgrade connection to:",a.query.transport),g.socketWsUpgrade=!0}),d.on("disconnect",function(){i.info("socket disconnected"),g.socketConnected=!1,g.socketWsUpgrade=!1})},c.autoconnect&&k.connect(),k.isConnected=function(){return d&&d.connection.connected},k.transport=function(){return d.connection.io.engine.transport.query.transport},k.emit=function(a,b,e){if("string"!=typeof a)throw new TypeError("Parameter eventName  is missing or is not of type string.");if(b=b||{},"function"==typeof b&&(e=b,b={}),"object"!=typeof b)throw new TypeError("Parameter data is not of type object.");if(k.isConnected())return"function"==typeof e?d.emit(a,b,e):d.emit(a,b);var f=function(){var a=new Error("Error: 405 Method Not Allowed, socket is not connected.");throw a.status=405,a},g=!1;j(function(){g=!0},c.timeout);var h=function(a){j(function(){return k.isConnected()||g?a():void h(a)},100)};h(function(){return k.isConnected()?"function"==typeof e?d.emit(a,b,e):d.emit(a,b):f()})},k.forward=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if(b&&!angular.isObject(b))throw new TypeError("Parameter scope is not of type object.");k.isConnected()?d.forward(a,b):f.push({name:a,scope:b})},k.on=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");k.isConnected()?d.on(a,b):e.push({name:a,action:b})},k.addListener=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");k.isConnected()?d.addListener(a,b):e.push({name:a,action:b})},k.removeListener=function(b,c){if(a(),"string"!=typeof b)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof c)throw new TypeError("Parameter callback is not of type function.");d.removeListener(b,c)},k.removeAllListeners=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");k.isConnected()?d.removeAllListeners(a,b):(e=[],f=[])},k}]});
//# sourceMappingURL=lx_socket.min.js.map