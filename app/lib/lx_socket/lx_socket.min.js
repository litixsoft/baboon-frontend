"use strict";angular.module("lx.socket",["btford.socket-io"]).provider("$lxSocket",function(){function a(){if(!d)throw new Error("Socket not connected")}var b,c,d;this.set=function(a,d){d=d||{},d.hasOwnProperty("reconnection")||(d.reconnection=!0),d.reconnectionDelay=d.reconnectionDelay||1e3,d.reconnectionDelayMax=d.reconnectionDelayMax||2e4,d.timeout=d.timeout||5e3,d.reconnectionAttempts=d.reconnectionAttempts||100,d.autoconnect=d.hasOwnProperty("autoconnect")?!!d.autoconnect:!0;try{if("string"!=typeof a||0===a.length)throw new TypeError("Parameter host is missing or is not of type string.");if("boolean"!=typeof d.reconnection)throw new TypeError("Parameter options.reconnection is not of type boolean.");if("number"!=typeof d.reconnectionDelay)throw new TypeError("Parameter options.reconnectionDelay is not of type number.");if("number"!=typeof d.reconnectionDelayMax)throw new TypeError("Parameter options.reconnectionDelayMax is not of type number.");if("number"!=typeof d.timeout)throw new TypeError("Parameter options.timeout is not of type number.");if("number"!=typeof d.reconnectionAttempts)throw new TypeError("Parameter options.reconnectionAttempts is not of type number.")}catch(e){throw e.message+=" (caused by $socketProvider.set)",console.error(e.message),console.error(e.stack),e}b=a,c=d},this.$get=["$rootScope","socketFactory","$log","$timeout",function(e,f,g,h){var i={};return i.connect=function(a){if(a&&!angular.isObject(a))throw new TypeError("Parameter options is missing or is not of type object.");var h=io.connect(b,angular.extend({},c,a||{})),i=h.io.engine;d=f({ioSocket:h}),d.connection=h,d.forward("connect"),d.forward("disconnect"),d.on("connect",function(){g.info("socket connected with:",i.transport.query.transport),e.socketConnected=!0}),i.on("upgrade",function(a){g.info("socket upgrade connection to:",a.query.transport),e.socketWsUpgrade=!0}),d.on("disconnect",function(){g.info("socket disconnected"),e.socketConnected=!1,e.socketWsUpgrade=!1})},c.autoconnect&&i.connect(),i.isConnected=function(){return d&&d.connection.connected},i.transport=function(){return d.connection.io.engine.transport.query.transport},i.emit=function(b,e,f){if(a(),"string"!=typeof b)throw new TypeError("Parameter eventName  is missing or is not of type string.");if(e=e||{},"function"==typeof e&&(f=e,e={}),"object"!=typeof e)throw new TypeError("Parameter data is not of type object.");if(d.connection.connected)return"function"==typeof f?d.emit(b,e,f):d.emit(b,e);var g=function(){var a=new Error("Error: 405 Method Not Allowed, socket is not connected.");throw a.status=405,a},i=!1;h(function(){i=!0},c.timeout);var j=function(a){h(function(){return d.connection.connected||i?a():void j(a)},100)};j(function(){return d.connection.connected?"function"==typeof f?d.emit(b,e,f):d.emit(b,e):g()})},i.forward=function(b,c){if(a(),"string"!=typeof b)throw new TypeError("Parameter event is not of type string.");if(c&&!angular.isObject(c))throw new TypeError("Parameter scope is not of type object.");d.forward(b,c)},i.on=function(b,c){if(a(),"string"!=typeof b)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof c)throw new TypeError("Parameter callback is not of type function.");d.on(b,c)},i.addListener=function(b,c){if(a(),"string"!=typeof b)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof c)throw new TypeError("Parameter callback is not of type function.");d.addListener(b,c)},i.removeListener=function(b,c){if(a(),"string"!=typeof b)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof c)throw new TypeError("Parameter callback is not of type function.");d.removeListener(b,c)},i.removeAllListeners=function(b,c){if(a(),"string"!=typeof b)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof c)throw new TypeError("Parameter callback is not of type function.");d.removeAllListeners(b,c)},i}]});
//# sourceMappingURL=lx_socket.min.js.map