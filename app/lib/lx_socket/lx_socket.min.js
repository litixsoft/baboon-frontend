"use strict";angular.module("lx.socket",["btford.socket-io"]).provider("$lxSocket",function(){var a,b;this.set=function(c,d){d=d||{},d.hasOwnProperty("reconnection")||(d.reconnection=!0),d.reconnectionDelay=d.reconnectionDelay||1e3,d.reconnectionDelayMax=d.reconnectionDelayMax||2e4,d.timeout=d.timeout||5e3,d.reconnectionAttempts=d.reconnectionAttempts||100;try{if("string"!=typeof c||0===c.length)throw new TypeError("Parameter host is missing or is not of type string.");if("boolean"!=typeof d.reconnection)throw new TypeError("Parameter options.reconnection is not of type boolean.");if("number"!=typeof d.reconnectionDelay)throw new TypeError("Parameter options.reconnectionDelay is not of type number.");if("number"!=typeof d.reconnectionDelayMax)throw new TypeError("Parameter options.reconnectionDelayMax is not of type number.");if("number"!=typeof d.timeout)throw new TypeError("Parameter options.timeout is not of type number.");if("number"!=typeof d.reconnectionAttempts)throw new TypeError("Parameter options.reconnectionAttempts is not of type number.")}catch(e){throw e.message+=" (caused by $socketProvider.set)",console.error(e.message),console.error(e.stack),e}a=c,b=d},this.$get=["$rootScope","socketFactory","$log","$timeout",function(c,d,e,f){function g(){var f,g=io.connect(a,b),h=g.io.engine;return f=d({ioSocket:g}),f.connection=g,f.forward("connect"),f.forward("disconnect"),f.on("connect",function(){e.info("socket connected with:",h.transport.query.transport),c.socketConnected=!0}),h.on("upgrade",function(a){e.info("socket upgrade connection to:",a.query.transport),c.socketWsUpgrade=!0}),f.on("disconnect",function(){e.info("socket disconnected"),c.socketConnected=!1,c.socketWsUpgrade=!1}),f}var h={},i=g();return h.isConnected=function(){return i.connection.connected},h.transport=function(){return i.connection.io.engine.transport.query.transport},h.emit=function(a,c,d){if("string"!=typeof a)throw new TypeError("Parameter eventName  is missing or is not of type string.");if(c=c||{},"function"==typeof c&&(d=c,c={}),"object"!=typeof c)throw new TypeError("Parameter data is not of type object.");if(i.connection.connected)return"function"==typeof d?i.emit(a,c,d):i.emit(a,c);var e=function(){var a=new Error("Error: 405 Method Not Allowed, socket is not connected.");throw a.status=405,a},g=!1;f(function(){g=!0},b.timeout);var h=function(a){setTimeout(function(){return i.connection.connected||g?a():void h(a)},100)};h(function(){return i.connection.connected?"function"==typeof d?i.emit(a,c,d):i.emit(a,c):e()})},h.forward=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if(b&&"object"!=typeof b)throw new TypeError("Parameter scope is not of type object.");i.forward(a,b)},h.on=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.on(a,b)},h.addListener=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.addListener(a,b)},h.removeListener=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.removeListener(a,b)},h.removeAllListeners=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.removeAllListeners(a,b)},h}]}),angular.module("lx.socket",["btford.socket-io"]).provider("$lxSocket",function(){var a,b;this.set=function(c,d){d=d||{},d.hasOwnProperty("reconnection")||(d.reconnection=!0),d.reconnectionDelay=d.reconnectionDelay||1e3,d.reconnectionDelayMax=d.reconnectionDelayMax||2e4,d.timeout=d.timeout||5e3,d.reconnectionAttempts=d.reconnectionAttempts||100;try{if("string"!=typeof c||0===c.length)throw new TypeError("Parameter host is missing or is not of type string.");if("boolean"!=typeof d.reconnection)throw new TypeError("Parameter options.reconnection is not of type boolean.");if("number"!=typeof d.reconnectionDelay)throw new TypeError("Parameter options.reconnectionDelay is not of type number.");if("number"!=typeof d.reconnectionDelayMax)throw new TypeError("Parameter options.reconnectionDelayMax is not of type number.");if("number"!=typeof d.timeout)throw new TypeError("Parameter options.timeout is not of type number.");if("number"!=typeof d.reconnectionAttempts)throw new TypeError("Parameter options.reconnectionAttempts is not of type number.")}catch(e){throw e.message+=" (caused by $socketProvider.set)",console.error(e.message),console.error(e.stack),e}a=c,b=d},this.$get=["$rootScope","socketFactory","$log","$timeout",function(c,d,e,f){var g={},h=function(){var f,g=io.connect(a,b),h=g.io.engine;return f=d({ioSocket:g}),f.connection=g,f.forward("connect"),f.forward("disconnect"),f.on("connect",function(){e.info("socket connected with:",h.transport.query.transport),c.socketConnected=!0}),h.on("upgrade",function(a){e.info("socket upgrade connection to:",a.query.transport),c.socketWsUpgrade=!0}),f.on("disconnect",function(){e.info("socket disconnected"),c.socketConnected=!1,c.socketWsUpgrade=!1}),f},i=h();return g.isConnected=function(){return i.connection.connected},g.transport=function(){return i.connection.io.engine.transport.query.transport},g.emit=function(a,c,d){if("string"!=typeof a)throw new TypeError("Parameter eventName  is missing or is not of type string.");if(c=c||{},"function"==typeof c&&(d=c,c={}),"object"!=typeof c)throw new TypeError("Parameter data is not of type object.");if(i.connection.connected)return d?i.emit(a,c,d):i.emit(a,c);var e=function(){var a=new Error("Error: 405 Method Not Allowed, socket is not connected.");throw a.status=405,a},g=!1;f(function(){g=!0},b.timeout);var h=function(a){setTimeout(function(){return i.connection.connected||g?a():void h(a)},100)};h(function(){return i.connection.connected?d?i.emit(a,c,d):i.emit(a,c):e()})},g.forward=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if(b&&"object"!=typeof b)throw new TypeError("Parameter scope is not of type object.");i.forward(a,b)},g.on=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.on(a,b)},g.addListener=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.addListener(a,b)},g.removeListener=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.removeListener(a,b)},g.removeAllListeners=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.removeAllListeners(a,b)},g}]}),angular.module("lx.socket",["btford.socket-io"]).provider("$lxSocket",function(){var a,b;this.set=function(c,d){d=d||{},d.hasOwnProperty("reconnection")||(d.reconnection=!0),d.reconnectionDelay=d.reconnectionDelay||1e3,d.reconnectionDelayMax=d.reconnectionDelayMax||2e4,d.timeout=d.timeout||5e3,d.reconnectionAttempts=d.reconnectionAttempts||100;try{if("string"!=typeof c||0===c.length)throw new TypeError("Parameter host is missing or is not of type string.");if("boolean"!=typeof d.reconnection)throw new TypeError("Parameter options.reconnection is not of type boolean.");if("number"!=typeof d.reconnectionDelay)throw new TypeError("Parameter options.reconnectionDelay is not of type number.");if("number"!=typeof d.reconnectionDelayMax)throw new TypeError("Parameter options.reconnectionDelayMax is not of type number.");if("number"!=typeof d.timeout)throw new TypeError("Parameter options.timeout is not of type number.");if("number"!=typeof d.reconnectionAttempts)throw new TypeError("Parameter options.reconnectionAttempts is not of type number.")}catch(e){throw e.message+=" (caused by $socketProvider.set)",console.error(e.message),console.error(e.stack),e}a=c,b=d},this.$get=["$rootScope","socketFactory","$log","$timeout",function(c,d,e,f){var g={},h=function(){var f,g=io.connect(a,b),h=g.io.engine;return f=d({ioSocket:g}),f.connection=g,f.forward("connect"),f.forward("disconnect"),f.on("connect",function(){e.info("socket connected with:",h.transport.query.transport),c.socketConnected=!0}),h.on("upgrade",function(a){e.info("socket upgrade connection to:",a.query.transport),c.socketWsUpgrade=!0}),f.on("disconnect",function(){e.info("socket disconnected"),c.socketConnected=!1,c.socketWsUpgrade=!1}),f},i=h();return g.isConnected=function(){return i.connection.connected},g.transport=function(){return i.connection.io.engine.transport.query.transport},g.emit=function(a,c,d){if("string"!=typeof a)throw new TypeError("Parameter eventName  is missing or is not of type string.");if(c=c||{},"function"==typeof c&&(d=c,c={}),"object"!=typeof c)throw new TypeError("Parameter data is not of type object.");if(i.connection.connected)return d?i.emit(a,c,d):i.emit(a,c);var e=function(){var a=new Error("Error: 405 Method Not Allowed, socket is not connected.");throw a.status=405,a},g=!1;f(function(){g=!0},b.timeout);var h=function(a){setTimeout(function(){return i.connection.connected||g?a():void h(a)},100)};h(function(){return i.connection.connected?d?i.emit(a,c,d):i.emit(a,c):e()})},g.forward=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if(b&&"object"!=typeof b)throw new TypeError("Parameter scope is not of type object.");i.forward(a,b)},g.on=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.on(a,b)},g.addListener=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.addListener(a,b)},g.removeListener=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.removeListener(a,b)},g.removeAllListeners=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.removeAllListeners(a,b)},g}]}),angular.module("lx.socket",["btford.socket-io"]).provider("$lxSocket",function(){var a,b;this.set=function(c,d){d=d||{},d.hasOwnProperty("reconnection")||(d.reconnection=!0),d.reconnectionDelay=d.reconnectionDelay||1e3,d.reconnectionDelayMax=d.reconnectionDelayMax||2e4,d.timeout=d.timeout||5e3,d.reconnectionAttempts=d.reconnectionAttempts||100;try{if("string"!=typeof c||0===c.length)throw new TypeError("Parameter host is missing or is not of type string.");if("boolean"!=typeof d.reconnection)throw new TypeError("Parameter options.reconnection is not of type boolean.");if("number"!=typeof d.reconnectionDelay)throw new TypeError("Parameter options.reconnectionDelay is not of type number.");if("number"!=typeof d.reconnectionDelayMax)throw new TypeError("Parameter options.reconnectionDelayMax is not of type number.");if("number"!=typeof d.timeout)throw new TypeError("Parameter options.timeout is not of type number.");if("number"!=typeof d.reconnectionAttempts)throw new TypeError("Parameter options.reconnectionAttempts is not of type number.")}catch(e){throw e.message+=" (caused by $socketProvider.set)",console.error(e.message),console.error(e.stack),e}a=c,b=d},this.$get=["$rootScope","socketFactory","$log","$timeout",function(c,d,e,f){var g={},h=function(){var f,g=io.connect(a,b),h=g.io.engine;return f=d({ioSocket:g}),f.connection=g,f.forward("connect"),f.forward("disconnect"),f.on("connect",function(){e.info("socket connected with:",h.transport.query.transport),c.socketConnected=!0}),h.on("upgrade",function(a){e.info("socket upgrade connection to:",a.query.transport),c.socketWsUpgrade=!0}),f.on("disconnect",function(){e.info("socket disconnected"),c.socketConnected=!1,c.socketWsUpgrade=!1}),f},i=h();return g.isConnected=function(){return i.connection.connected},g.transport=function(){return i.connection.io.engine.transport.query.transport},g.emit=function(a,c,d){if("string"!=typeof a)throw new TypeError("Parameter eventName  is missing or is not of type string.");if(c=c||{},"function"==typeof c&&(d=c,c={}),"object"!=typeof c)throw new TypeError("Parameter data is not of type object.");if(i.connection.connected)return d?i.emit(a,c,d):i.emit(a,c);var e=function(){var a=new Error("Error: 405 Method Not Allowed, socket is not connected.");throw a.status=405,a},g=!1;f(function(){g=!0},b.timeout);var h=function(a){setTimeout(function(){return i.connection.connected||g?a():void h(a)},100)};h(function(){return i.connection.connected?d?i.emit(a,c,d):i.emit(a,c):e()})},g.forward=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if(b&&"object"!=typeof b)throw new TypeError("Parameter scope is not of type object.");i.forward(a,b)},g.on=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.on(a,b)},g.addListener=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.addListener(a,b)},g.removeListener=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.removeListener(a,b)},g.removeAllListeners=function(a,b){if("string"!=typeof a)throw new TypeError("Parameter event is not of type string.");if("function"!=typeof b)throw new TypeError("Parameter callback is not of type function.");i.removeAllListeners(a,b)},g}]});
//# sourceMappingURL=lx_socket.min.js.map