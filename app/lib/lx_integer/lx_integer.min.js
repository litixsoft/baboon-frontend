"use strict";angular.module("lx.integer",[]).directive("lxInteger",function(){var a=/^\-?\d+$/;return{restrict:"A",require:"ngModel",link:function(b,c,d,e){e.$validators.lxinteger=function(b){return null===b||void 0===b?!0:a.test(b)},e.$parsers.push(function(b){return b?a.test(b)?parseInt(b,10):0/0:null}),e.$formatters.unshift(function(b){return isNaN(b)||null===b||(b=a.test(b)?parseInt(b,10).toString():b),b})}}}),describe("lxInteger",function(){var a,b;beforeEach(module("lx.integer")),beforeEach(inject(function(c,d){a=d.$new();var e=angular.element('<form name="form"><intput type="text" ng-model="model.val" name="val" lx-integer /></form>');a.model={},c(e)(a),a.$digest(),b=a.form})),it("should be initialized correctly",function(){expect(a.model.val).toBeUndefined()}),it("should pass with integer",function(){b.val.$setViewValue(1),expect(a.model.val).toEqual(1),expect(b.val.$valid).toBe(!0)}),it("should pass with negative integer",function(){b.val.$setViewValue(-1),expect(a.model.val).toEqual(-1),expect(b.val.$valid).toBe(!0)}),it("should not pass with float",function(){b.val.$setViewValue(4.25),expect(a.model.val).toBeUndefined(),expect(b.val.$valid).toBe(!1)}),it("should pass with string",function(){b.val.$setViewValue("3"),expect(a.model.val).toEqual(3),expect(b.val.$valid).toBe(!0)}),it("should not pass with date",function(){b.val.$setViewValue(new Date),expect(a.model.val).toBeUndefined(),expect(b.val.$valid).toBe(!1)}),it("should not pass with boolean",function(){b.val.$setViewValue(!0),expect(a.model.val).toBeUndefined(),expect(b.val.$valid).toBe(!1)}),it("should not pass with an array",function(){b.val.$setViewValue([1,2,3]),expect(a.model.val).toBeUndefined(),expect(b.val.$valid).toBe(!1)}),it("should not pass with an object",function(){b.val.$setViewValue({Value1:"John",Value2:"Doe"}),expect(a.model.val).toBeUndefined(),expect(b.val.$valid).toBe(!1)}),it("should pass with undefined",function(){b.val.$setViewValue(void 0),expect(a.model.val).toBeUndefined(),expect(b.val.$valid).toBe(!0)}),it("should pass with null",function(){b.val.$setViewValue(null),expect(a.model.val).toBeNull(),expect(b.val.$valid).toBe(!0)}),it("should return null if model is null",function(){a.model.val=null,a.$digest(),expect(b.val.$viewValue).toBe(null),expect(b.val.$valid).toBe(!0)}),it("should not pass if model is NaN",function(){a.model.val="NaN",a.$digest(),expect(b.val.$valid).toBe(!1)}),it("should pass with valid model",function(){a.model.val=1,a.$digest(),expect(b.val.$valid).toBe(!0)})});
//# sourceMappingURL=lx_integer.min.js.map